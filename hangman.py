import sys
import argparse
from utils import *
from ascii_art import *

numGuesses = 10
hintIndicator = "_"
description = f"""
Hangman game
--------------
Can you guess the word in {numGuesses} tries?
"""

def main(argv):
    # get command line arguments
    args = cli(argv)
    easyMode = args.easy
    # preliminary setup
    wordList = ".\woordenlijst.txt" # generated by PowerShell from larger OpenTaal source file
    answer = choose_line(wordList).rstrip().lower() # if you don't strip you may be left with a dangling \r
    wordLength = len(answer)
    hint = hintIndicator * wordLength
    guessesLeft = numGuesses # guessesLeft will decrement
    # main program loop
    while guessesLeft > 0:

        print('H A N G M A N')
        print(HANGMAN_PICS[numGuesses - guessesLeft])
        print(hint)
        print("")
        guess = input(f"Please enter a single character to guess:\nYou have {guessesLeft} tries left.\n" )
        state = EvaluateAnswerState(answer, hint, guess)
        match state:
            case AnswerState.NoInput:
                print("No input provided. Please try again")
                continue
            case AnswerState.InvalidCharacter:
                print("Invalid character input. Please try again.")
                continue
            case AnswerState.InvalidLength:
                print("Invalid input length. Please try again.")
                continue
            case AnswerState.DuplicateMatch:
                print(f"You already found the character '{guess}'. Please try again.")
                continue
            case AnswerState.DuplicateNoMatch:
                if easyMode:
                    print(f"You already tried '{guess}' silly!")
                    continue
                else:
                    print(f"Too bad. The answer does not contain '{guess}'.")
                    # duplicate of NoMatch output. Ideally want to refactor (DRY principle) but not sure how yet.
                    # the simplest way woyuld probably to move the logic from EvaluateAnswerState to main loop,
                    # but that would make it more messy.
                    guessesLeft -= 1
                    if guessesLeft > 0:
                        continue
            case AnswerState.NoMatch:
                print(f"Too bad. The answer does not contain '{guess}'.")
                guessesLeft -= 1
                if guessesLeft > 0:
                    continue
            case AnswerState.Match:
                hint = ReplaceCharacterInHint(answer, hint, guess)
                if hint == answer or guess == answer:
                    print(f"Congratulations! You found the answer '{answer}' with {guessesLeft} tries left.")
                    input("Press Enter to close the program.")
                    break
                print(f"Nice one! The answer does indeed contain '{guess}'.")
                continue
        print(f"Oh dear. You did not guess the word. The word was '{answer}'. Better luck next time.")

class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter):
    pass # do nothing

def cli(argv):
    parser = argparse.ArgumentParser(
        prog=argv[0],
        description=description,
        formatter_class=CustomFormatter)

    parser.add_argument(
        "--easy", "-e",
        action='store_true',
        help="Remembers what characters you already tried.")

    args = parser.parse_args(argv[1:])

    return args

if __name__ == '__main__':
    sys.exit(main(sys.argv))